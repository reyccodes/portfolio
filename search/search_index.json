{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi! I'm Shreya Chaudhary","text":"<p>This website is currently under development!</p> <p>Expect for some major changes to occur within the new few hours and days!</p> <p>Hello! I'm an undergraduate studying Computer Science and Engineering at MIT. I'm currently exploring the vast awesomeness of computer science and engineering and trying to find what vibes with me best!</p> <p>This website's very much a work-in-progress, but here are some things to know about me!</p> My Developer Environment <p>Text Editor: Right now, my primary text editor is Vim. (I've dabbled in NeoVim but haven't yet switched over.) I have a pretty minimalist setup but have just about everything I need!</p> <p>Operating System: The operating systems I use most are Ubuntu and MacOS. Some other operating systems I occassionally use are Kali and Mint. (I'm also taking an OS class right now and working on implementing aspects of xv6!)  </p> My Stack <p>Primary Programming Language: I've found myself using a lot of Python recently for all the machine learning and data science work I've been doing. I've also been pretty interested in more low-level work and have consequently been finding myself using a lot of C and C++. </p> <p>Data Science Stack: I tend to use a lot of Python, R, and occassionally Julia and MATLAB. I use a ton of PyTorch and ocassionally Tensorflow.</p> <ul> <li> <p>Data Visualization: Data visualization is super important for presenting your work, and I've explored several different libraries. For R, I primarily use ggplot2. In Python, for simple plots, I use Matplotlib or Plotly; for dashboards, I use Plotly Dash or Streamlit. </p> </li> <li> <p>Graph Technology: I've been working with graphs since mid-high school. I worked for TigerGraph for two years and used it for side projects. For graph machine learning, I primarily use Pytorch-Geometric and occassionally DGL. </p> </li> <li> <p>Natural Language Processing: I like spaCy's models a lot. I also have used NLTK for more traditional NLP work.</p> </li> </ul> <p>Web Dev Stack: I used to work on a ton of web development and now only occassionally help out with web dev projects. During web development, I used FastAPI for leverage a Python backend, and if Python wasn't necessary, I created a Node.js backend with either Express or from scratch. My frontend was either pure HTML/CSS, HTML/CSS with Bootstrap, React/React Native, or Flutter. (I've also dabbled in a handful of other frameworks.) For the database, I used MongoDB, Firebase, and TigerGraph.</p>"},{"location":"class_projects/","title":"Class Projects!","text":"<p>Throughout my classes, I've gotten the awesome opportunity to learn a ton of pretty interesting skills. Here's a collection of some projects I've worked on for my classes. (Note, by course policies, I cannot publically post most of the source code. Instead, I provided some write-ups on things I've learned for some of the projects!)</p>"},{"location":"class_projects/#61810-operating-systems-engineering","title":"6.1810: Operating Systems Engineering","text":"<p>I learned a ton in this class about, well, operating systems! Specifically, I've grown more familiar with practical skills, like more familiarity with how to work with memory in C and debugging with gdb, and learned more about the inner workings of Linux. The class primarily consisted of adding specific features to xv6, a bare-bones operating system. Throughout the class, I think I've managed to touch every file in xv6 and really get familiar with how an OS works which is what I primarily wanted to get out of the class. My aspiration is to build my own operation system someday, though now I think I have a much better idea of how many components would go into that!</p>"},{"location":"class_projects/#copy-on-write","title":"Copy-on-Write","text":"<p>An oddly finnicky aspect to add. The key idea of copy-on-write is that when creating a fork, often we don't need all of the memory, especially since we often have a fork() followed by an exec() which will override all the files anyways. Instead, we can lazily allocate physical memory as needed. Some key components that went into the lab was (1) moving around the allocation logic, (2) keeping track of how many things were pointing to a VA to decide when to free it, and (3) making sure all other errors still returned. </p>"},{"location":"class_projects/#61010-fundamentals-of-programming","title":"6.1010: Fundamentals of Programming","text":"<p>Overall, this class was pretty chill with labs usually taking me the afternoon to complete. Here are some of my favorite labs.</p>"},{"location":"class_projects/#lisp-interpreter","title":"LISP Interpreter","text":"<p>This was the capstone lab and quite fun. We were able to </p>"},{"location":"class_projects/#n-d-mines","title":"N-D Mines","text":"<p>A fun recursive lab which required implementing the mines game in n-d. </p>"},{"location":"classes/","title":"My Current Coursework!","text":""},{"location":"classes/#freshman-year","title":"Freshman Year","text":""},{"location":"classes/#fall","title":"Fall","text":"<ul> <li>Math for Computer Science</li> <li>Introduction to C and Assembly</li> <li>Multivariate Calculus</li> <li>Physics I: Mechanics</li> <li>Introduction to Solid-State Chemistry</li> </ul>"},{"location":"classes/#iap","title":"IAP","text":"<ul> <li>MASLab (worked on StaffBot + Simulation)</li> <li>Weblab</li> <li>Introduction to Quantum Computing</li> </ul>"},{"location":"classes/#spring","title":"Spring","text":"<ul> <li>Computational Structures</li> <li>Introduction to Probability</li> <li>Introduction to Algorithms</li> <li>Circuits</li> <li>Introduction to Media Studies</li> </ul>"},{"location":"classes/#sophomore-year","title":"Sophomore Year","text":""},{"location":"classes/#fall_1","title":"Fall","text":"<ul> <li>Design and Analysis of Algorithms</li> <li>Operating Systems Engineering</li> <li>Robotics Manipulation</li> <li>Introduction to Machine Learning</li> <li>Fundamentals of Programming</li> <li>Screenwriting</li> </ul>"},{"location":"classes/#iap_1","title":"IAP","text":"<ul> <li>Chinese I</li> <li>MASLab (Actual Competition Year!)</li> <li>UPOP TTW</li> </ul>"},{"location":"classes/#spring_1","title":"Spring","text":"<ul> <li>Applied Cryptography</li> <li>Advances in Computer Vision</li> <li>Elements of Software Construction</li> <li>Computer Systems Engineering</li> <li>Macroeconomics</li> <li>Medival Economics</li> </ul>"},{"location":"projects/","title":"Projects (and Skills)","text":"<p>There are a ton of things I'm interested in and I'm still exploring! Unfortunately, I can't open-source a lot of the work I'm doing right now, but here are some open-source or completed projects I've worked on!</p>"},{"location":"projects/#general-projects","title":"General Projects","text":"Personal Technical Blog <p>https://shreya-chaudhary.medium.com/</p> <p>I used to write blogs on concepts and projects I was working on, publishing with top data science publications like Towards Data Science, Geek Culture, DataDrivenInvestors, Dev Genius, and more! I even had a publication reach out to translate my article! Check it out to see a ton of my older projects! You'll notably find a ton of TigerGraph projects I worked on! Here are some pictures from those projects!</p> <p></p> DevPost <p>https://devpost.com/GenericP3rson</p> <p>Several open-source full-stack applications in various areas of interest!</p>"},{"location":"projects/#technical-projects","title":"Technical Projects","text":"A Suite of Differential Privacy Algorithms <p>During IAP 2023, I helped develop a suite of differential privacy algorithms specifically for energy-related use cases. I used the Laplace Mechanism to add sufficient noise to both continuous and discrete data. Here's a gif of the algorithm in action, generating a synthetic dataset on some arbitrary distribution I created. You'll notice that at the beginning, the data is completely different from the original dataset; however, over time, it converges to roughly the ideal dataset with a certain amount of noise.</p> <p></p> Modelling 1000+ Satellites with GMAT <p>Over the summer, I got to learn how to conduct orbit modelling and wrote a Python program to generate a script to feed into NASA's GMAT to simulate over 1,000 satellites in low-Earth orbit (LEO). This is simulating a Walker Constellation.</p> <p></p> OrderBot <p>For 6.421, I built a robot that could prepare foods from a human order given a list of random ingredients from a known set of ingredients. </p>"},{"location":"projects/#libraries","title":"Libraries","text":"TorchQuantum <p>I've helped out with expanding and maintaining TorchQuantum, a GPU-accelerated PyTorch-based framework for quantum computing and simulation. I've worked on streamlining the review process for new PRs, solidifying the structure of the framework, and added several new gates. I also penned a new tutorial.</p> <p></p> TigerGraph-CosmoGraph Plugin <p>I created the first plugin for the GPU-accelerated graph visualizer Cosmograph, allowing it to easily port in TigerGraph. You can check out the integration here.</p> <p></p> TigerGraph.js <p>I developed a Node.js connector to ease the process for full-stack developers to use TigerGraph. (This project also managed to win 3rd place overall at the Graphathon challenge!) </p> <p></p> TigerGo <p>When I began learning Golang, I created a TigerGraph wrapper in the language which I then used to create CLIs with Cobra and experimented with Golang's full-stack options. Check it out!</p> <p></p>"},{"location":"projects/#fun-generative-projects","title":"Fun Generative Projects","text":"A DCGAN Birthday Card <p>For a friend's birthday, I used Selenium to scrape a ton of birthday card images and trained a Deep Convolutional Generative Adversial Network to make a birthday card. The results weren't bad given the noise\u2014check it out! (The input images are on the left and the generated images are on the right.)</p> <p></p> Using Quantum Procedural Generation on Squirrels <p>For our final project for introduction to quantum computing over IAP, my project partners and I used quantum procedural generation on squirrels. Check out this blog outlining what we did!</p> <p></p>"}]}